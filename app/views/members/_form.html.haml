<script>
$(function() {
$( "#tabs" ).tabs();
});
</script>
- @member = @record
- @member_pers = @member.personnel_data || PersonnelData.new
- @health_data = @member.health_data || HealthData.new
- child = @member.child
<div class='member_form'>
#tabs
  %ul
    %li <a href="#tabs-member">Person</a>
    - if child
      %li <a href="#tabs-school">School</a>
    - else
      - if can? :read, HealthData
        %li <a href="#tabs-personnel">Personnel</a>
    - if can? :read, HealthData
      %li <a href="#tabs-health">Health</a>
    %li <a href="#tabs-groups">Groups</a>

  = form_for :head do |member|
    #tabs-member
      %table.new_family
        %tr
          %td
            = member.label :last_name,"", :class=>'required'
            %br
            = member.text_field :last_name, :class=> "last_name-input"
          %td
            = member.label :first_name,"", :class=>'required'
            %br
            = member.text_field :first_name, :class=> "first_name-input"
          %td
            = member.label :middle_name
            %br
            = member.text_field :middle_name, :class=> "middle_name-input"
          %td
            = member.label :short_name
            %br
            = member.text_field :short_name, :class=> "short_name-input"
          %td
            = member.label :sex, :class=>'required'
            %br
            = member.select(:sex, [['Female','F'], ['Male','M']], {:include_blank => true} )
        %tr
          %td
            .birth_date        
              = member.label :birth_date, :class => 'birth_date-input'
              %br
              = member.text_field  :birth_date, :class => 'birth_date-input date_picker '
          %td
            .country
              = member.label :country_id
              %br
              - choices = options_from_collection_for_select(Country.where('include_in_selection').select('id, name').order('name'), :id, :name, @member[:country_id])
              = member.select(:country_id, choices, {:include_blank => true }, :class=>'wide-input')    
        %tr
          %td
            = member.label :name, "Full name of individual", :class=>'required'
            %br
            = member.text_field :name, :class=> "name-input"
            %br
            %p.description Must be unique
            %td
              = label_tag :head_status_id, "Field status"
              %br
              - choices = options_from_collection_for_select(Status.select('id, description').order('description'), :id, :description, @member[:status_id])
              = member.select(:status_id, choices, {:include_blank => true }, :class=>'medium-input')    
            %td
              %label Employment status: see in Personnel tab
          %tr
          - if child
            Child stuff here
          - else
            %td
              = member.label :ministry_id, "Ministry"
              %br
              - choices = options_from_collection_for_select(Ministry.select('id, description').order('description'), :id, :description, @member[:ministry_id])
              = member.select(:ministry_id, choices, {:include_blank => true }, :class=>'wide-input')    
            %td
              = member.label :work_location_id, "Ministry location"
              %br
              - choices = options_from_collection_for_select(Location.select('id, description').order('description'), :id, :description, @member[:work_location_id])
              = member.select(:work_location_id, choices, {:include_blank => true }, :class=>'ministry_location-input')    
            %td{:colspan=>'2'}
              = member.label :ministry_comment, "Ministry comments"
              %br
              = member.text_field :ministry_comment, :class=>'ministry_comments'   
        %tr
          %td
            = label :head_contact, :phone_1, "Phone on field"
            %br
            = text_field :head_contact, :phone_1, :class=>'phone-input'
          %td
            = label :head_contact, :email_1, "Email 1"
            %br
            = text_field :head_contact, :email_1
          %td{:colspan=>'2'}
            = member.label :temporary_location, "Temporary location"
            %br
            = member.text_field :temporary_location, :class=>'temporary_location-input'
        %tr
          %td
            = label :head_contact, :phone_2, "Phone 2"
            %br
            = text_field :head_contact, :phone_2, :class=>'phone-input'
          %td
            = label :head_contact, :email_2, "Email 2"
            %br
            = text_field :head_contact, :email_2
          %td
            = member.label :temporary_location_from_date, "Temp. loc. start date"
            %br
            = member.text_field:temporary_location_from_date, :class => 'active_date-input date_picker '
          %td
            = member.label :temporary_location_until_date, "Until"
            %br
            = member.text_field :temporary_location_until_date, :class => 'active_date-input date_picker '
    - if @member.child
      #tabs-school
        = member.label :school
        %br
        = member.text_field :school, :class=>'school-input'
        %br
        %br
        = member.label :school_grade, "Grade"
        %br
        = member.text_field :school_grade, :class=>'grade-input'
    - else
      - if can? :read, PersonnelData
        #tabs-personnel
          %table.new_family
            %tr
              %td
                = label_tag :head_pers_date_active, "Date active with SIM"
                %br
                = text_field :head_pers,  :date_active, :class => 'date_active-input date_picker '
              %td
                = label_tag :head_pers_est_end_of_service, "Est. end of service"
                %br
                = text_field :head_pers,  :est_end_of_service, :class => 'active_date-input date_picker '
              %td
                = label_tag :head_pers_employment_status_id, "Employment status"
                %br
                - choices = options_from_collection_for_select(EmploymentStatus.where('current_use AND (child = ? OR child is ?)', false, nil).select('id, description').order('description'), :id, :description, @member_pers[:employment_status_id])
                = select(:head_pers, :employment_status_id, choices, {:include_blank => true }, :class=>'medium-input')    
            %tr
              %td
                .education
                  = label :head_pers, :education_id
                  %br
                  - choices = options_from_collection_for_select(Education.select('id, description').order('description'), :id, :description, @member_pers[:education_id])
                  = select(:head_pers, :education_id, choices, {:include_blank => true }, :class=>'medium-input')    
              %td
                .qualifications
                  = label :head_pers, :qualifications
                  %br
                  = text_field :head_pers, :qualifications, :class=> 'medium-input'
            %tr
              %td{:colspan=>'3'}
                = label_tag :head_pers_comments, "Personnel comments"
                %br
                = text_area :head_pers, :comments, :cols=>80, :rows=>5
            
    - if can? :read, HealthData
      #tabs-health
        %table.new_family
          %tr
            %td
              = label_tag :health_data_bloodtype_id, "Blood type"
              %br
              = collection_select(:health_data, :bloodtype_id, Bloodtype.all, :id, :full, {:include_blank => true }, :class=>'medium-input')    
            %td
              = label_tag :health_data_current_meds, "Current medications"
              %br
              = text_field :health_data, :current_meds
          %tr
            %td
              = label_tag :health_data_issues, "Health issues"
              %br
              = text_field :health_data, :issues
            %td
              = label_tag :health_data_allergies, "Allergies"
              %br
              = text_field :health_data, :allergies
          %tr
            %td{:colspan=>'2'}
              = label_tag :health_data_comments
              %br
              = text_area :health_data, :comments, :cols=>80, :rows=>5
    #tabs-groups
      = member.label :group_ids, "Groups to which this person belongs"
      %br
      = member.select :group_ids, Group.order('group_name').collect {|x| [x.group_name, x.id]}, {}, :multiple => true, :size=>15, :class=>'multiselect multiselect-group'

