<script>
$(function() {
$( "#tabs" ).tabs();
});
</script>
-# Set up some convenience variables
- @head_pers ||= PersonnelData.new
- wifeclass = ''
- if @wife
  - @wife_pers ||= PersonnelData.new
  - wifeclass = @wife.first_name.blank? ? 'wife_hidden' : 'wife_visible'

<div >

<div id="tabs">
<ul>
<li><a href="#tabs-head">Head</a></li>
- if @wife
  <li id='wife-tab' class="#{wifeclass}"><a href="#tabs-wife">Wife</a></li>
<li><a href="#tabs-children">Children</a></li>
<li><a href="#tabs-family">Family</a></li>
<li><a href="#tabs-tasks">Tasks</a></li>
</ul>
= form_for :record do |main_form|
  #tabs-head
    %h5 Information for the individual or <em>head</em> of family
    = fields_for :head do |member|
      %table.new_family
        %tr
          %td
            = member.label :last_name,"", :class=>'required'
            %br
            = member.text_field :last_name, :class=> "last_name-input"
          %td
            = member.label :first_name,"", :class=>'required'
            %br
            = member.text_field :first_name, :class=> "first_name-input"
          %td
            = member.label :middle_name
            %br
            = member.text_field :middle_name, :class=> "middle_name-input"
          %td
            = member.label :short_name
            %br
            = member.text_field :short_name, :class=> "short_name-input"
          %td
            = member.label :sex, :class=>'required'
            %br
            = member.select(:sex, [['Female','F'], ['Male','M']], {:include_blank => true} )
        %tr
          %td
            .birth_date        
              = member.label :birth_date, :class => 'birth_date-input'
              %br
              = member.text_field  :birth_date, :class => 'birth_date-input date_picker '
          %td
            .country
              = member.label :country_id
              %br
              - choices = options_from_collection_for_select(Country.where('include_in_selection').select('id, name').order('name'), :id, :name, @head[:country_id])
              = member.select(:country_id, choices, {:include_blank => true }, :class=>'wide-input')    
          %td
            .education
              = label :head_pers, :education_id
              %br
              - choices = options_from_collection_for_select(Education.select('id, description').order('description'), :id, :description, @head_pers[:education_id])
              = select(:head_pers, :education_id, choices, {:include_blank => true }, :class=>'medium-input')    
          %td
            .qualifications
              = label :head_pers, :qualifications
              %br
              = text_field :head_pers, :qualifications, :class=> 'medium-input'
          
        %tr
          %td
            = member.label :name, "Full name of individual", :class=>'required'
            %br
            = member.text_field :name, :class=> "name-input"
            %br
            %p.description Must be unique
          %td
            = label_tag :head_pers_date_active, "Date active with SIM"
            %br
            = text_field :head_pers,  :date_active, :class => 'date_active-input date_picker '
          %td
            = label_tag :head_pers_est_end_of_service, "Est. end of service"
            %br
            = text_field :head_pers,  :est_end_of_service, :class => 'active_date-input date_picker '
          %td
            = label_tag :head_pers_employment_status_id, "Employment status"
            %br
            - choices = options_from_collection_for_select(EmploymentStatus.where('current_use AND (child = ? OR child is ?)', false, nil).select('id, description').order('description'), :id, :description, @head_pers[:employment_status_id])
            = select(:head_pers, :employment_status_id, choices, {:include_blank => true }, :class=>'medium-input')    
            %td
              = label_tag :head_status_id, "Field status"
              %br
              - choices = options_from_collection_for_select(Status.select('id, description').order('description'), :id, :description, @head[:status_id])
              = member.select(:status_id, choices, {:include_blank => true }, :class=>'medium-input')    
        %tr
          %td
            = member.label :ministry_id, "Ministry"
            %br
            - choices = options_from_collection_for_select(Ministry.select('id, description').order('description'), :id, :description, @head[:ministry_id])
            = member.select(:ministry_id, choices, {:include_blank => true }, :class=>'wide-input')    
          %td
            = member.label :work_location_id, "Ministry location"
            %br
            - choices = options_from_collection_for_select(Location.select('id, description').order('description'), :id, :description, @head[:work_location_id])
            = member.select(:work_location_id, choices, {:include_blank => true }, :class=>'ministry_location-input')    
            %td{:colspan=>'2'}
              = member.label :ministry_comment, "Ministry comments"
              %br
              = member.text_field :ministry_comment, :class=>'ministry_comments'   
        %tr
          %td
            = label :head_contact, :phone_1, "Phone on field"
            %br
            = text_field :head_contact, :phone_1, :class=>'phone-input'
          %td
            = label :head_contact, :email_1, "Email 1"
            %br
            = text_field :head_contact, :email_1
          %td{:colspan=>'2'}
            = member.label :temporary_location, "Temporary location"
            %br
            = member.text_field :temporary_location, :class=>'temporary_location-input'
        %tr
          %td
            = label :head_contact, :phone_2, "Phone 2"
            %br
            = text_field :head_contact, :phone_2, :class=>'phone-input'
          %td
            = label :head_contact, :email_2, "Email 2"
            %br
            = text_field :head_contact, :email_2
          %td
            = member.label :temporary_location_from_date, "Temp. loc. start date"
            %br
            = member.text_field:temporary_location_from_date, :class => 'active_date-input date_picker '
          %td
            = member.label :temporary_location_until_date, "Until"
            %br
            = member.text_field :temporary_location_until_date, :class => 'active_date-input date_picker '
          - if @wife && wifeclass == 'wife_hidden'   
            %td
              = label_tag :show_wife, "Show tab for wife"
              = check_box_tag(:show_wife)  
      

  - if @wife
    #tabs-wife(class=wifeclass)
      = fields_for :wife do |member|
        %h5 Information for the wife (leave blank if single)
        = fields_for :wife do |member|
          %table.new_family
            %tr
              %td
                = member.label :last_name,"", :class=>'required'
                %br
                = member.text_field :last_name, :class=> "last_name-input"
              %td
                = member.label :first_name,"", :class=>'required'
                %br
                = member.text_field :first_name, :class=> "first_name-input"
              %td
                = member.label :middle_name
                %br
                = member.text_field :middle_name, :class=> "middle_name-input"
              %td
                = member.label :short_name
                %br
                = member.text_field :short_name, :class=> "short_name-input"
            %tr
              %td
                .birth_date        
                  = member.label :birth_date, :class => 'birth_date-input'
                  %br
                  = member.text_field  :birth_date, :class => 'birth_date-input date_picker '
              %td
                .country
                  = member.label :country_id
                  %br
                  - choices = options_from_collection_for_select(Country.where('include_in_selection').select('id, name').order('name'), :id, :name, @wife[:country_id])
                  = member.select(:country_id, choices, {:include_blank => true }, :class=>'country-input')    
              %td
                .education
                  = label :wife_pers, :education
                  %br
                  - choices = options_from_collection_for_select(Education.select('id, description').order('description'), :id, :description, @wife_pers[:education_id])
                  = select(:wife_pers, :education_id, choices, {:include_blank => true }, :class=>'medium-input')    
              %td
                .qualifications
                  = label :wife_pers, :qualifications
                  %br
                  = text_field :wife_pers, :qualifications, :class=> 'medium-input'
              
            %tr
              %td
                = member.label :name, "Full name of individual", :class=>'required'
                %br
                = member.text_field :name, :class=> "name-input"
                %br
                %p.description Must be unique
              %td
                = label_tag :wife_pers_date_active, "Date active with SIM"
                %br
                = text_field :wife_pers,  :date_active, :class => 'active_date-input date_picker '
              %td
                = label_tag :wife_pers_est_end_of_service, "Est. end of service"
                %br
                = text_field :wife_pers,  :est_end_of_service, :class => 'active_date-input date_picker '
              %td
                = label_tag :wife_pers_employment_status_id, "Employment status"
                %br
                - choices = options_from_collection_for_select(EmploymentStatus.where('current_use AND (child = ? OR child is ?)', false, nil).select('id, description').order('description'), :id, :description, @wife_pers[:employment_status_id])
                = select(:wife_pers, :employment_status_id, choices, {:include_blank => true }, :class=>'medium-input')    
              %td
                = label_tag :wife_status_id, "Field status"
                %br
                - choices = options_from_collection_for_select(Status.select('id, description').order('description'), :id, :description, @wife[:status_id])
                = member.select(:status_id, choices, {:include_blank => true }, :class=>'medium-input')    
            %tr
              %td
                = member.label :ministry, "Ministry"
                %br
                - choices = options_from_collection_for_select(Ministry.select('id, description').order('description'), :id, :description, @wife[:ministry_id])
                = member.select(:ministry_id, choices, {:include_blank => true }, :class=> 'ministry-input')    
              %td
                = member.label :work_location_id, "Ministry location"
                %br
                - choices = options_from_collection_for_select(Location.select('id, description').order('description'), :id, :description, @wife[:work_location_id])
                = member.select(:work_location_id, choices, {:include_blank => true }, :class=>'ministry_location-input')    
              %td{:colspan=>'2'}
                = member.label :ministry_comment, "Ministry comments"
                %br
                = member.text_field :ministry_comment, :class=>'ministry_comments'    
            %tr
              %td
                = label_tag :wife_contact_phone_1, "Phone on field"
                %br
                = text_field :wife_contact, :phone_1, :class=> 'phone-input'
              %td
                = label_tag :wife_contact_email_1, "Email 1"
                %br
                = text_field :wife_contact, :email_1
              %td{:colspan=>'2'}
                = member.label :temporary_location, "Temporary location"
                %br
                = member.text_field :temporary_location, :class=>'temporary_location-input'
            %tr
              %td
                = label_tag :wife_contact_phone_2, "Phone 2"
                %br
                = text_field :wife_contact, :phone_2, :class=> 'phone-input'
              %td
                = label_tag :wife_contact_email_2, "Email 2"
                %br
                = text_field :wife_contact, :email_2
              %td
                = member.label :temporary_location_from_date, "Temp. loc. start date"
                %br
                = member.text_field:temporary_location_from_date, :class => 'active_date-input date_picker '
              %td
                = member.label :temporary_location_until_date, "Until"
                %br
                = member.text_field :temporary_location_until_date, :class => 'active_date-input date_picker '
              
  #tabs-children
    %h5 Information for the children
    %table.children
      %th.name First name
      %th.name Middle name
      %th.name Short name
      %th.birth_date Birthdate
      %th.sex Sex
      %th.school Schooling
      %th.grade Grade
      %th.status Status
      - @children.each do |child|
        = main_form.fields_for child, :index=>child.id do |child_form|
          %tr
            %td 
              = child_form.text_field :first_name, :class => 'first_name-input'
            %td 
              = child_form.text_field :middle_name, :class => 'first_name-input'
            %td 
              = child_form.text_field :short_name, :class => 'first_name-input'
            %td 
              = child_form.text_field :birth_date, :class => 'active_date-input date_picker_smaller '
            %td
              = child_form.select(:sex, [['Female','F'], ['Male','M']], {:include_blank => true} )
            %td 
              = child_form.text_field  :school, :class=>'school-input'
            %td 
              = child_form.text_field :school_grade, :class=>'grade-input'
            %td 
              - status_choices = options_from_collection_for_select(EmploymentStatus.where('child').select('id, description').order('description'), :id, :description, (child.personnel_data.employment_status_id if child.personnel_data))
              = child_form.fields_for :personnel_data do |child_pers|
                = child_pers.select(:employment_status_id, status_choices, {:include_blank => true} )
              
        
  #tabs-family
    %h5 Information for the family
    %table.new_family
      %tr
        %td
          = main_form.label :name, 'Name to identify family', :class=>'required'
          %br
          = main_form.text_field :name, :class=> "name-input", :title=>'Can be same as name of head of family or a customized family name like "Hill, Jack & Jill"'
          %br
          %p.description Must be unique.
        %td
          = main_form.label :sim_id, 'SIM ID', :class=>'required', :title=>'Can be same as name of head of family or a customized family name like "Hill, Jack & Jill"'
          %br
          = main_form.text_field :sim_id, :class => 'sim_id-input', :title=>'Can be left blank. If used, it must be unique.'
        %td
          = main_form.label :residence_location_id, "Residence location!"
          %br
          = main_form.select(:residence_location_id, location_choices(@record[:residence_location_id]), {:include_blank => true })
        %td
          = main_form.label :status_id, "Status"
          %br
          - choices = options_from_collection_for_select(Status.select('id, description').order('description'), :id, :description, @record[:status_id])
          = main_form.select(:status_id, choices, {:include_blank => true }, :class=>'medium-input')
      %tr
        %td
          = hidden_field :current_term, :id
          = label_tag :current_term_end_date, 'Ending date for current or most recent term'
        %td
          = text_field :current_term, :end_date, :class => 'active_date-input date_picker ' 
        %td
          = check_box :current_term, :end_estimated, :title=>'Check if end-term date is estimated or approximate'
          = label :current_term, :end_estimated, 'End date is estimated?', :title=>'Check if end-term date date is estimated or approximate'
      %tr
        %td
          = label_tag :next_term_start_date, raw('Estimated starting date for <strong>next</strong> term')
        %td
          = hidden_field :next_term, :id
          = text_field :next_term, :start_date, :class => 'active_date-input date_picker ' 
  #tabs-tasks
    %h5 Personnel Tasks
    -#= fields_for tasks, :index=>child.id do |child_form|
    %table
      - @pers_tasks.each do |task_type|
        %tr
          %td
            = "#{task_type[:type].to_s.humanize}: "
            - task_type[:tasks].each do |task|
              %td
                -# There has to be a cleaner way to put in these checkboxes ... try it when I have time!
                - if task.finished
                  %input{:id=>"task_#{task.id}", :type=>"checkbox", :value=>"1", :name=>"tasks[task_#{task.id}]", :checked=>"checked"}
                - else
                  %input{:id=>"task_#{task.id}", :type=>"checkbox", :value=>"1", :name=>"tasks[task_#{task.id}]"}
                = label_tag("task_#{task.id}", task.task)

